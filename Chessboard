public class Chessboard {
	public static class Field {
		private char row;
		private byte column;
		private Chesspiece piece = null;
		private boolean marked = false;

		public Field(char row, byte column) {
			this.row = row;
			this.column = column;
		}

		public void put(Chesspiece piece) {
			this.piece = piece;
		}

		public Chesspiece take() {
			return piece = null;
		}

		public void mark() {
			marked = true;
		}

		public void unmark() {
			marked = false;
		}

		public String toString() {
			String s = (marked) ? "xx" : "--";
			return (piece == null) ? s : piece.toString();
		}

	}

	public static final int NUMBER_OF_ROWS = 8;
	public static final int NUMBER_OF_COLUMNS = 8;

	public static final int FIRST_ROW = 'a';
	public static final int FIRST_COLUMN = 1;

	private Field[][] fields;
	
	public void setPiece (char row, byte column, Chesspiece piece) {
		int r = row - FIRST_ROW;
		Chessboard.this.fields[r][column].put(piece);
	}

	public Chessboard() {
		fields = new Field[NUMBER_OF_ROWS][NUMBER_OF_COLUMNS];
		char row = 0;
		byte column = 0;
		for (int r = 0; r < NUMBER_OF_ROWS; r++) {
			row = (char) (FIRST_ROW + r);
			column = FIRST_COLUMN;
			for (int c = 0; c < NUMBER_OF_COLUMNS; c++) {
				fields[r][c] = new Field(row, column);
				column++;
			}
		}
	}

	//printar brädan
	public String toString() {
		StringBuilder boardstring = new StringBuilder();
		for (int i = 0; i < NUMBER_OF_ROWS; i++) {
			for(int j = 0; j < NUMBER_OF_COLUMNS; j++) {
				
				if (i == 0 && j == 0)
					boardstring.append("  a  b  c  d  e  f  g  h\r\n");
				if (j == 0) {
					boardstring.append((i + 1) + " ");
				}
				boardstring.append(fields[j][i].toString() + " ");
				
			}
			boardstring.append("\r\n");
		}
		return boardstring.toString();
	}

	public boolean isValidField(char row, byte column) {
		if (96 < row && row < 105 && -1 < column && column < 9)
			return true;
		else return false;		
	}

	public abstract class Chesspiece {
		private char color;
		// w -white, b -black
		private char name;
		// K -King, Q -Queen, R -Rook, B -Bishop, N -Knight,
		// P –Pawn

		protected char row = 0;
		protected byte column = -1;

		protected Chesspiece(char color, char name) {
			this.color = color;
			this.name = name;
		}

		public String toString() {
			return "" + color + name;
		}

		public boolean isOnBoard() {
			return Chessboard.this.isValidField(row, column);
		}
		
		class NotValidFieldException extends Exception{
			public NotValidFieldException (String cok) {
				super(cok);
			}
		}

		public void moveTo(char row, byte column) throws NotValidFieldException {
			if (!Chessboard.this.isValidField(row, column))
				throw new NotValidFieldException("bad field: " + row + column);

			this.row = row;
			this.column = column;

			int r = row - FIRST_ROW;
			int c = column - FIRST_COLUMN + 1;
			Chessboard.this.fields[r][c].put(this);
		}

		public void moveOut() {
		}

		public abstract void markReachableFields();

		public abstract void unmarkReachableFields();
	}

	public class Pawn extends Chesspiece {
		public Pawn(char color, char name) {
			super(color, name);
		}

		//?????????????????????????????????????????????????????????????????????
		public void markReachableFields() {
			byte col = (byte) (column + 1);
			if (Chessboard.this.isValidField(row, col)) {
				int r = row - FIRST_ROW;
				int c = col - FIRST_COLUMN;
				Chessboard.this.fields[r][c].mark();
			}
		}

		public void unmarkReachableFields() {
			byte col = (byte) (column + 1);
			if (Chessboard.this.isValidField(row, col)) {
				int r = row - FIRST_ROW;
				int c = col - FIRST_COLUMN;
				Chessboard.this.fields[r][c].unmark();
			}
		}
	}

//	public class Rook extends Chesspiece {
//	}
//
//	public class Knight extends Chesspiece {
//	}
//
//	public class Bishop extends Chesspiece {
//	}
//
//	public class Queen extends Chesspiece {
//	}
//
//	public class King extends Chesspiece {
//	}
}
