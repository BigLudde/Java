
public interface Polylinje extends java.lang.Iterable<Punkt> {
	Punkt[] getHorn();

	String getFarg();

	int getBredd();

	double langd();

	void setFarg(String farg);

	void setBredd(int bredd);

	public void laggTill(Punkt horn);

	void laggTillFramfor(Punkt horn, String hornNamn);

	void taBort(String hornNamn);

	java.util.Iterator<Punkt> iterator();
}



class VPolylinje implements Polylinje {
	private Punkt[] horn;
	private String farg = "svart";
	private int bredd = 1;
	

	public VPolylinje() {
		this.horn = new Punkt[0];
	}

	public VPolylinje(Punkt[] horn) {
		this.horn = new Punkt[horn.length];
		for (int i = 0; i < horn.length; i++) {
			this.horn[i] = new Punkt(horn[i]);
		}
	}

	public String toString() {
		StringBuilder polystring = new StringBuilder("{[");
		for (int i = 0; i < horn.length; i++) {
			polystring.append(horn[i].toString());
		}
		polystring.append("], " + farg + ", " + bredd + "}");
		return polystring.toString();
	}

	public Punkt[] getHorn() {
		Punkt[] copy = new Punkt[horn.length];
		for (int i = 0; i < horn.length; i++)
			copy[i] = new Punkt(horn[i]);
		return copy;
	}

	public String getFarg() {
		return farg;
	}

	public int getBredd() {
		return bredd;
	}

	public void setFarg(String farg) {
		this.farg = farg;
	}

	public void setBredd(int bredd) {
		this.bredd = bredd;
	}

	public double langd() {
		double langd = 0;
		for (int i = 1; i < horn.length; i++) {
			langd += horn[i - 1].avstand(horn[i]);
		}

		return langd;
	}

	public void laggTill(Punkt horn) {
		Punkt[] h = new Punkt[this.horn.length + 1];

		int i = 0;
		for (i = 0; i < this.horn.length; i++)
			h[i] = this.horn[i];
		h[i] = new Punkt(horn);
		this.horn = h;
	}

	public void laggTillFramfor(Punkt horn, String hornNamn) {
		Punkt[] h = new Punkt[this.horn.length + 1];

		int index = -1;
		int j = 0;
		for (int i = 0; i < this.horn.length; i++) {
			if (this.horn[i].getNamn() == hornNamn)
				index = j++;
			h[j++] = this.horn[i];
		}
		h[index] = new Punkt(horn);

		this.horn = h;

	
	}

	public void taBort(String hornNamn) {
		Punkt[] h = new Punkt[this.horn.length - 1];

		int k = 0;
		int j = 0;
		for (int i = 0; i < this.horn.length - 1; i++) {
			if (this.horn[i].getNamn().equals(hornNamn)) {
				h[j++] = this.horn[i + 1];
				k = 1;
			} else {
				h[j++] = this.horn[i + k];
			}
		}

		this.horn = h;
	}
	
	public java.util.Iterator<Punkt> iterator() {
		return new Vpolyiterator();
    }
	
	private class Vpolyiterator implements java.util.Iterator<Punkt> {
		private int index = 0;
		public boolean hasNext() {
			return index + 1 < horn.length;
		}
		public Punkt next() {
			int add = 1;
			if (horn[index + 1] == null) add = 2;
			return horn[index + add];
		}
	}
}


//=================================================================================================================//
class NPolylinje implements Polylinje {
	private static class Nod 
	{
		public Punkt horn;
		public Nod nastaNod;

		public Nod(Punkt horn) 
		{
			this.horn = horn;
			nastaNod = null;
		}
	}

	private Nod horn;
	private String farg = "svart";
	private int        bredd= 1;// pixlar
	
	public NPolylinje ()
	{
		this.horn = null;
	}
	
	int c = 1;
	public NPolylinje (Punkt[] horn)
	{
		if (horn.length > 0)
		{
			Nod nod = new Nod (new Punkt (horn[0]));
			this.horn = nod;
			int pos = 1;
			while (pos < horn.length)
			{
				nod.nastaNod = new Nod (new Punkt(horn[pos++]));
				nod = nod.nastaNod;
			}
		}
	}
	// ytterligare kod här
	public String toString() {
		StringBuilder polystring = new StringBuilder("{[");
		java.util.Iterator<Punkt> nIterator = new Npolyiterator();
		while(nIterator.hasNext()) {
			polystring.append(nIterator.next());
		}
		polystring.append("], " + farg + ", " + bredd + "}");
		return polystring.toString();
	}
	
	public Punkt[] getHorn() {
		Punkt[] copy = new Punkt[c];
		Punkt h = this.horn.horn;
		for (int i = 0; i < c; i++) {
			copy[i] = h;
			h = this.horn.nastaNod.horn;
		}
		return copy;
	}

	public String getFarg() {
		return farg;
	}

	public int getBredd() {
		return bredd;
	}

	public double langd() {
		double langd = 0;
		java.util.Iterator<Punkt> nIterator = new Npolyiterator();
		Punkt prev = nIterator.next();
		while(nIterator.hasNext()) {
			Punkt temp = nIterator.next();
			langd += temp.avstand(prev);
			prev = temp;
		}
		return langd;
	}

	public void setFarg(String farg) {
		this.farg = farg;
	}

	public void setBredd(int bredd) {
		this.bredd = bredd;
	}

	public void laggTill(Punkt horn) {
		Nod nod = new Nod (new Punkt (horn));
		nod.nastaNod = this.horn;
		this.horn = nod;
	}

	public void laggTillFramfor(Punkt horn, String hornNamn) {
		java.util.Iterator<Punkt> nIterator = new Npolyiterator();
		if (hornNamn == this.horn.horn.getNamn()) {
			Nod nod = new Nod (new Punkt (horn));
			nod.nastaNod = this.horn;
			this.horn = nod;
		}
		else {	
			while(nIterator.hasNext()) {
				
				if (nIterator.next().getNamn() == hornNamn) {
					Nod tnod = null;
					Nod nod = new Nod (new Punkt (horn));
					tnod = this.horn;
					nod.nastaNod = tnod;
					nod.nastaNod = this.horn;
					break;
				}
			}
		}
	}

	public void taBort(String hornNamn) {
		
	}

	public java.util.Iterator<Punkt> iterator(){
		return new Npolyiterator();
	}
	
	private class Npolyiterator implements java.util.Iterator<Punkt>{
		private Nod currentNod = horn;
		public Punkt next() {
			Nod n = currentNod;
			currentNod = currentNod.nastaNod;
			return n.horn;
		}
		public boolean hasNext() {
			return currentNod != null;
		}
		public void remove() {
			
		}
	}
}

//fixa remove till iteratorn
//behövs till läggtillframför 
